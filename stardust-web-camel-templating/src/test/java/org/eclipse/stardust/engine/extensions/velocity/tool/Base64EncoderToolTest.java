package org.eclipse.stardust.engine.extensions.velocity.tool;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.io.InputStream;

import org.apache.camel.CamelContext;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.util.ResourceHelper;
import org.apache.commons.io.IOUtils;
import org.eclipse.stardust.engine.extensions.templating.core.ServiceException;
import org.eclipse.stardust.engine.extensions.templating.enricher.VelocityContextAppenderProcessor;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Base64EncoderToolTest
{
   private final String EXPECTED = "";

   private CamelContext camelContext;

   @Before
   public void before()
   {
      this.camelContext = new DefaultCamelContext();
   }

   @After
   public void after() throws Exception
   {
      this.camelContext.stop();
   }

   @Test
   public void testEncodeBase64String() throws ServiceException, IOException
   {
      InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(
            camelContext.getClassResolver(),
            "file:src/test/resources/custom/templates/simpleDocxTemplate.docx");
      Base64EncoderTool tool = new Base64EncoderTool();
      assertEquals(EXPECTED, tool.encodeBase64String(IOUtils.toByteArray(is)));
   }

   @Test
   public void testLoadVelocityContextAndEncodeBase64String()
         throws ServiceException, IOException
   {
      ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(
            new String[] {
                  "classpath:META-INF/spring/templating-application-context.xml"});
      VelocityContextAppenderProcessor customVelocityContextAppender = (VelocityContextAppenderProcessor) ctx
            .getBean("customVelocityContextAppender");
      Base64EncoderTool tool = (Base64EncoderTool) customVelocityContextAppender
            .getVelocityContext().get("base64Encoder");
      InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(
            camelContext.getClassResolver(),
            "file:src/test/resources/custom/templates/simpleDocxTemplate.docx");
      assertEquals(EXPECTED, tool.encodeBase64String(IOUtils.toByteArray(is)));
      ctx.close();
   }
}
