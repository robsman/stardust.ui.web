/*******************************************************************************
 * Copyright (c) 2015 SunGard CSA LLC and others. All rights reserved. This
 * program and the accompanying materials are made available under the terms of
 * the Eclipse Public License v1.0 which accompanies this distribution, and is
 * available at http://www.eclipse.org/legal/epl-v10.html Contributors: SunGard
 * CSA LLC - initial API and implementation and/or initial documentation
 ******************************************************************************/

/**
 * @author Yogesh.Manware
 */

(function() {
  'use strict';

  angular.module('modeler-ui').controller(
          'sdActivityImplementationTaskCtrl',
          ['$scope', 'sdRequireJSService', 'sdUtilService',
              ActivityImplementationTaskCtrl]);

  /*
   * 
   */
  function ActivityImplementationTaskCtrl($scope, sdRequireJSService,
          sdUtilService) {
    var self = this;
    self.initialized = false;
    self.show = false;

    // load requireJs modules, in future these would be services
    var promise = sdRequireJSService.getPromise();
    promise.then(function() {
      self.m_utils = sdRequireJSService
              .getModule('plugins/bpm-modeler/js/m_utils');
      self.m_i18nUtils = sdRequireJSService
              .getModule('plugins/bpm-modeler/js/m_i18nUtils');
      self.m_constants = sdRequireJSService
              .getModule('plugins/bpm-modeler/js/m_constants');
      self.m_modelElementUtils = sdRequireJSService
              .getModule('plugins/bpm-modeler/js/m_modelElementUtils');
      self.m_model = sdRequireJSService
              .getModule('plugins/bpm-modeler/js/m_model');
      self.m_ruleSetsHelper = sdRequireJSService
              .getModule('plugins/bpm-modeler/js/m_ruleSetsHelper');
      self.m_modelerUtils = sdRequireJSService
              .getModule('plugins/bpm-modeler/js/m_modelerUtils');

    }, function() {
      console.error("exception occurred while loading requirejs modules")
    });

    $scope
            .$on(
                    'PAGE_ELEMENT_CHANGED',
                    function(event, page) {
                      if (!self.initialized) {
                        // generic
                        self.page = page;
                        self.propertiesPanel = self.page.propertiesPanel;
                      }
                      // Activity Implementation Page specific
                      if (self.propertiesPanel.element.modelElement) {
                        if (self.propertiesPanel.element.modelElement.activityType != self.m_constants.SUBPROCESS_ACTIVITY_TYPE) {
                          self.show = true;
                        } else {
                          self.show = false;
                        }
                      }
                      self.reset();
                      self.initialized = true;
                    });

    ActivityImplementationTaskCtrl.prototype.safeApply = function() {
      sdUtilService.safeApply($scope);
    }
  }

  /**
   * 
   */
  ActivityImplementationTaskCtrl.prototype.i18n = function(key) {
    return this.m_i18nUtils.getProperty(key);
  }

  /**
   * 
   */
  ActivityImplementationTaskCtrl.prototype.reset = function() {
    this.element = this.propertiesPanel.element;
    if (!this.element) { return; }

    this.modelElement = this.element.modelElement;

    this.noImplementation = null;
    this.ruleSet = false;
    this.application = false;

    if (this.modelElement.taskType == this.m_constants.NONE_TASK_TYPE
            || this.modelElement.taskType == this.m_constants.MANUAL_TASK_TYPE) {

      this.noImplementation = this.getNoImplementationMsg();
    } else if (this.modelElement.taskType == this.m_constants.RULE_TASK_TYPE) {

      this.populateRuleSetList();
      this.selectedRuleSet = !this.modelElement.attributes["ruleSetId"]
              ? this.m_constants.TO_BE_DEFINED
              : this.modelElement.attributes["ruleSetId"];
      this.ruleSet = true;

    } else {
      this.populateApplicationList();
      this.selectedApplication = !this.modelElement.applicationFullId
              ? this.m_constants.TO_BE_DEFINED
              : this.modelElement.applicationFullId;
      this.application = true;

    }
  }

  /**
   * @returns
   */
  ActivityImplementationTaskCtrl.prototype.getNoImplementationMsg = function() {
    var message = "";
    if (this.modelElement.taskType == this.m_constants.MANUAL_TASK_TYPE) {
      message = this
              .i18n("modeler.propertiesPage.activity.implementation.autoGeneratedScreen");
    } else {
      message = this
              .i18n("modeler.propertiesPage.activity.implementation.notRequiredAvailable");
    }
    return message;
  }

  /**
   * 
   */
  ActivityImplementationTaskCtrl.prototype.populateApplicationList = function() {
    this.applicationList = [];

    this.applicationList.push({
      id: this.m_constants.TO_BE_DEFINED,
      label: this.i18n('modeler.general.toBeDefined')
    });

    var appsSorted = this.m_utils.convertToSortedArray(
            this.getModel().applications, "name", true);

    var thisModel = this.i18n('modeler.general.thisModel');

    for ( var i in appsSorted) {
      if (!this.checkCompatibility(appsSorted[i])) {
        continue;
      }

      this.applicationList.push({
        id: appsSorted[i].getFullId(),
        label: appsSorted[i].name,
        group: thisModel
      })
    }
    var modelsSorted = this.m_utils.convertToSortedArray(this.m_model
            .getModels(), "name", true);

    var otherModel = this.i18n('modeler.general.otherModel');

    for ( var n in modelsSorted) {
      if (modelsSorted[n] == this.getModel()) {
        continue;
      }

      var appsSorted = this.m_utils.convertToSortedArray(
              modelsSorted[n].applications, "name", true);

      for ( var m in appsSorted) {
        if (!this.m_modelElementUtils.hasPublicVisibility(appsSorted[m])) {
          continue;
        }

        if (!this.checkCompatibility(appsSorted[m])) {
          continue;
        }

        this.applicationList.push({
          id: appsSorted[m].getFullId(),
          label: modelsSorted[n].name + "/" + appsSorted[m].name,
          group: otherModel
        })
      }
    }
  }
  /**
   * 
   */
  ActivityImplementationTaskCtrl.prototype.populateRuleSetList = function() {
    this.ruleSetList = [];
    this.ruleSetList.push({
      id: this.m_constants.TO_BE_DEFINED,
      label: this.i18n("modeler.general.toBeDefined")
    });

    var ruleSets = this.m_ruleSetsHelper.getRuleSets();

    if (ruleSets) {
      ruleSets = this.m_utils.convertToSortedArray(ruleSets, "name", true);
      for ( var i in ruleSets) {
        if (ruleSets[i].state.isDeleted != true) {
          this.ruleSetList.push({
            id: ruleSets[i].id,
            label: ruleSets[i].name
          });
        }
      }
    }
  };

  /**
   * 
   */
  ActivityImplementationTaskCtrl.prototype.openApplication = function() {
    var application = this.m_model.findApplication(this.selectedApplication);
    this.m_modelerUtils.openApplicationView(application);
  }

  /**
   * 
   */
  ActivityImplementationTaskCtrl.prototype.isLinkDisabled = function() {
    if (!this.selectedApplication
            || this.selectedApplication == this.m_constants.TO_BE_DEFINED) { return true; }
    return false;
  }
  /**
   * @param application
   * @returns {Boolean}
   */
  ActivityImplementationTaskCtrl.prototype.checkCompatibility = function(
          application) {
    if (application
            && this.modelElement.taskType === application
                    .getCompatibleActivityTaskType()) { return true; }

    return false;
  }

  /**
   * 
   */
  ActivityImplementationTaskCtrl.prototype.onImplementationChange = function() {
    this.submitImplementionChanges();
  }

  /**
   * 
   */
  ActivityImplementationTaskCtrl.prototype.onRuleSetChange = function() {
    this.submitRuleSetChanges();
  }

  /**
   * @returns
   */
  ActivityImplementationTaskCtrl.prototype.getModel = function() {
    return this.propertiesPanel.propertiesPage.getModel();
  }

  // Server Interaction
  /**
   * 
   */
  ActivityImplementationTaskCtrl.prototype.submitImplementionChanges = function() {
    this.page
            .submitChanges({
              modelElement: {
                applicationFullId: this.selectedApplication == this.m_constants.TO_BE_DEFINED
                        ? null : this.selectedApplication
              }
            });
  }

  /**
   * 
   */
  ActivityImplementationTaskCtrl.prototype.submitRuleSetChanges = function() {
    this.page.submitChanges({
      modelElement: {
        attributes: {
          ruleSetId: this.selectedRuleSet
        }
      }
    });
  };
})();